Testcase for 2-matrix_divided functions
=======================================
This module divides all elements of a matrix by a given number and returns a new matrix. ``matrix_divided(matrix, div)``

Usage
=====
importing function from matrix_divided module:

    >>>matrix_divided = __import__('2-matrix_divided').matrix_divided
    >>> matrix = [
    ...     [3, 6, 9],
    ...     [12, 15, 18]
    ... ]
    >>> print(matrix_divided(matrix, 3))
    [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]

quotients are rounded to a maximum of two decimal places

Handling of integers in the two matrix
    >>> matrix = [
     ...  [3, 6, 1],
     ...  [9, 6, 3]
    ]
    >>>print(matrix_divided(matrix, 3))
    [[1.0, 2.0, 0.33], [3.0, 2.0, 1.0]]

The original matrix is left unchanged.
::
   >>> print (matrix)
   [[3, 6, 1], [9, 6, 3]]

Combine both float and integer
::

   
   >>> matrix = [
   ...     [4.1, 2, 1.2, 5],
   ...   [9, 6.8, 3, 2.7]
   ]
   >>> print(matrix_divided(matrix, 3))
   [[1.37, 0.67, 0.4, 1.67], [3.0, 2.27, 1.0, 0.9]]

Combination of two floats

::

   >>> matrix = [
   ...        [4.1, 2.5, 1.2, 5.2],
   ...   [9.1, 6.8, 3.0, 2.7]
   ]
   >>> print(matrix_divided(matrix, 3))
   [[1.37, 0.83, 0.4, 1.73], [3.03, 2.27, 1.0, 0.9]]

invalid Matrices
==============

The parameter ``matrix`` must be a list of lists consisting of either ints or
floats. If ``matrix`` is not a list, a TypeError is raised.

::

    >>> matrix = "not a list"
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

::

    >>> matrix = None
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Note that an empty list will raise the TypeError.
::

    >>> matrix = []
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

But an empty list of lists will succeed.

::

    >>> matrix = [[]]
    >>> print(matrix_divided(matrix, 3))
    [[]]

An identical TypeError is raised if ``matrix`` is not specifically a list of
lists.

::

    >>> matrix = [1, 2, 3]
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

The same TypeError is raised yet again if any elements in ``matrix`` are
neither ints nor floats.

::

    >>> matrix = [
    ...     [1, 2, 3],
    ...     [4, "not a number", 6]
    ... ]
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Finally, all the rows in ``matrix`` must be the same size. If any rows are
of different sizes, a new TypeError is raised.

::

    >>> matrix = [
    ...     [1, 2, 3, 4],
    ...     [5, 6, 7]
    ... ]
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: Each row of the matrix must have the same size

Invalid Divisors
================

The parameter ``div`` must be either an int or float. Otherwise, a TypeError
is raised.

::

    >>> matrix = [
    ...     [1, 2, 3],
    ...     [4, 5, 6]
    ... ]
    >>> print(matrix_divided(matrix, "not a number"))
    Traceback (most recent call last):
    TypeError: div must be a number

::

    >>> print(matrix_divided(matrix, None))
    Traceback (most recent call last):
    TypeError: div must be a number

``div`` must also be non-zero. Otherwise, a ZeroDivisionError is raised.

::

    >>> print(matrix_divided(matrix, 0))
    Traceback (most recent call last):
    ZeroDivisionError: division by zero
